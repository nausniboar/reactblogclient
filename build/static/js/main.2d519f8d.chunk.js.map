{"version":3,"sources":["components/header/Header.jsx","components/post/Post.jsx","components/posts/Posts.jsx","components/sidebar/Sidebar.jsx","pages/home/Home.jsx","context/Reducer.js","context/Context.js","components/topbar/TopBar.jsx","components/singlePost/SinglePost.jsx","pages/single/Single.jsx","pages/write/Write.jsx","pages/settings/Settings.jsx","pages/login/Login.jsx","pages/register/Register.jsx","App.js","index.js"],"names":["Header","className","src","alt","Post","post","photo","categories","map","c","name","to","_id","title","Date","createdAt","toDateString","desc","Posts","posts","p","Sidebar","useState","cats","setCats","useEffect","a","axios","get","res","data","getCats","Home","setPosts","search","useLocation","require","fetchPosts","Reducer","state","action","type","user","isFetching","error","payload","INITIAL_STATE","JSON","parse","localStorage","getItem","Context","createContext","ContextProvider","children","useReducer","dispatch","setItem","stringify","Provider","value","TopBar","useContext","onClick","profilePic","xmlns","dominantBaseline","x","y","username","charAt","toUpperCase","SinglePost","path","pathname","split","setPost","setTitle","setDesc","updateMode","setUpdateMode","userFromId","refreshUserData","getPost","handleDelete","delete","window","location","replace","handleUpdate","put","autoFocus","onChange","e","target","Single","Write","file","setFile","handleSubmit","preventDefault","newPost","FormData","filename","now","append","console","log","URL","createObjectURL","onSubmit","htmlFor","id","style","display","files","placeholder","Settings","setUsername","email","setEmail","password","setPassword","success","setSuccess","updatedUser","userId","Login","userRef","useRef","passwordRef","current","ref","disabled","Register","setError","color","marginTop","App","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d519f8d.chunk.js","sourcesContent":["import \"./header.css\"\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"headerTitles\">\r\n                <span className=\"headerTitleSm\">React & Node</span>\r\n                <span className=\"headerTitleLg\">Blog</span>\r\n            </div>\r\n            <img\r\n                className=\"headerImg\"\r\n                src=\"https://beckyvandijk.com/wp-content/uploads/2020/09/stock-photography-blog.jpg\"\r\n                alt=\"\"\r\n            />\r\n        </div>\r\n    )\r\n}","import \"./post.css\";\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport default function Post({post}) {\r\n    // declaring a public folder location to display images from\r\n    const PF = \"http://localhost:5000/images/\";\r\n    return (\r\n        <div className=\"post\">\r\n            {\r\n            // cheeky conditional usage: using post object passed in by Posts.jsx, create a\r\n            // postImg div only if post.photo exists\r\n            post.photo && (\r\n                <img\r\n                    className=\"postImg\"\r\n                    src = {PF + post.photo}\r\n                    alt=\"\"\r\n                />\r\n            )}\r\n            <div className=\"postInfo\">\r\n                <div className=\"postCats\">\r\n                    {post.categories.map((c)=> (\r\n                        <span className=\"postCat\">{c.name}</span>\r\n                    ))}\r\n                </div>\r\n                {/* using react-router-dom's Link and the id imported in the post variable, change\r\n                    the page to a SinglePost.jsx with the url set to a specific post's id.\r\n                    Remember, the link knows to go to SinglePage.jsx because of the /post/ route\r\n                    defined in App.js */}\r\n                <Link to={`/post/${post._id}`} className=\"link\">\r\n                    <span className=\"postTitle\">{post.title}</span>\r\n                </Link>\r\n                <hr/>\r\n                <span className=\"postDate\">{new Date(post.createdAt).toDateString()}</span>\r\n            </div>\r\n            <p className=\"postDesc\">\r\n                {post.desc}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import Post from \"../post/Post\"\r\nimport \"./posts.css\"\r\n\r\nexport default function Posts({posts}) {\r\n    return (\r\n        <div className=\"posts\">\r\n            {\r\n            // using map function, which is an array function, to break variable posts into\r\n            // individual pieces (p), and then create a post inside Posts.jsx for each entry\r\n            // passed into the file by Home.jsx, filled with the corresponding information.\r\n            // kind of like a foreach loop\r\n            posts.map((p)=> (\r\n                <Post post={p}/>\r\n            ))}\r\n            Hi costco :) Site still under construction\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\nimport axios from \"axios\";\r\nimport \"./sidebar.css\"\r\n\r\nexport default function Sidebar() {\r\n    const [cats,setCats] = useState([]);\r\n    // another useEffect function; this time, we call the api's categories.js get function to give\r\n    // us an object that contains all of our categories\r\n    useEffect(()=> {\r\n        const getCats = async ()=>\r\n        {\r\n            const res = await axios.get(\"/categories\");\r\n            setCats(res.data);\r\n        };\r\n        getCats();\r\n    },[])\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebarItem\">\r\n                <span className=\"sidebarTitle\">ABOUT ME</span>\r\n                <img\r\n                    src=\"https://www.seguetech.com/wp-content/uploads/2014/08/segue-blog-stock-photos-vs-real-photos.png\"\r\n                    alt=\"\"\r\n                />\r\n                <p>\r\n                    Lorem ipsum, dolor sit amet consectetur adipisicing elit. Aut quasi inventore explicabo, nihil, ratione perferendis ipsum itaque nemo possimus modi, exercitationem quae? Id praesentium, deserunt fuga optio cumque delectus dignissimos!\r\n                </p>\r\n            </div>\r\n            <div className=\"sidebarItem\">\r\n                <span className=\"sidebarTitle\">CATEGORIES</span>\r\n                <ul className=\"sidebarList\">\r\n                    {/* another .map function; this time, instead of getting data on posts and \r\n                        populating Posts.jsx, we're displaying a group of collections individually\r\n                        as (c) using the data we got from the api above\r\n                        the Link react component also makes these categories clickable, so that\r\n                        clicking on any one sends you back to Home.jsx with the ?cat= query being\r\n                        whichever one you clicked on, filtering the homepage by that category */}\r\n                    {cats.map((c) => (\r\n                        <Link to={`/?cat=${c.name}`} className=\"link\">\r\n                            <li className=\"sidebarListItem\">{c.name}</li>\r\n                        </Link>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            <div className=\"sidebarItem\">\r\n                <span className=\"sidebarTitle\">FOLLOW US</span>\r\n                <div className=\"sidebarSocial\">\r\n                    <i className=\"sidebarIcon fab fa-facebook-square\"></i>\r\n                    <i className=\"sidebarIcon fab fa-twitter-square\"></i>\r\n                    <i className=\"sidebarIcon fab fa-pinterest-square\"></i>\r\n                    <i className=\"sidebarIcon fab fa-instagram-square\"></i>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { useLocation } from \"react-router\"\r\nimport Header from \"../../components/header/Header\"\r\nimport Posts from \"../../components/posts/Posts\"\r\nimport Sidebar from \"../../components/sidebar/Sidebar\"\r\nimport \"./home.css\"\r\nimport axios from \"axios\"\r\n    \r\nexport default function Home() {\r\n    // not quite sure what useState is, it's a react component; however, the statement seems to\r\n    // describe where setPosts() is going to send data\r\n    const [posts,setPosts] = useState([]);\r\n    // this line is similar to location call in SinglePost.jsx, but in this case, we're getting\r\n    // only the \"search\" field from the object\r\n    const {search} = useLocation()\r\n    // not sure on what useEffect() really means, but it calls axios to look at our rest api via\r\n    // referring to the proxy + the given path, so http://localhost:5000/api/posts\r\n    useEffect(()=>{\r\n        const fetchPosts = async ()=>{\r\n            require('axios-debug-log')\r\n            const res = await axios.get(\"/posts\"+search) \r\n            setPosts(res.data);\r\n        }\r\n        fetchPosts();\r\n    },[search]);\r\n    // passing the data about each blog post into the react component Posts via the variable posts,\r\n    // in order to populate their text/images on the page\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <div className=\"home\">\r\n                <Posts posts={posts}/>\r\n                <Sidebar/>\r\n            </div>\r\n        </>\r\n    )\r\n}","// can be LoginReducer as well\r\nconst Reducer = (state, action) => {\r\n    // same \"type\" in actions.js\r\n    switch(action.type) {\r\n        case \"LOGIN_START\":\r\n            return {\r\n                user: null,\r\n                isFetching: true,\r\n                error: false\r\n            };\r\n        case \"LOGIN_SUCCESS\":\r\n            // in this case, we are being returned a user payload, can use it\r\n            return {\r\n                user: action.payload,\r\n                isFetching: false,\r\n                error: false\r\n            };\r\n        case \"LOGIN_FAILURE\":\r\n            return {\r\n                user: null,\r\n                isFetching: false,\r\n                error: true\r\n            };\r\n        case \"UPDATE_START\":\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            };\r\n        case \"UPDATE_SUCCESS\":\r\n            // in this case, we are being returned a user payload, can use it\r\n            return {\r\n                user: action.payload,\r\n                isFetching: false,\r\n                error: false\r\n            };\r\n        case \"LOGIN_FAILURE\":\r\n            return {\r\n                user: state.user,\r\n                isFetching: false,\r\n                error: true\r\n            };\r\n        case \"LOGOUT\":\r\n            return {\r\n                user: null,\r\n                isFetching: false,\r\n                error: false\r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default Reducer;","import {createContext, useReducer} from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport Reducer from \"./Reducer\";\r\n\r\nconst INITIAL_STATE = {\r\n    user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n    isFetching: false,\r\n    error: false\r\n}\r\n\r\nexport const Context = createContext()\r\n\r\nexport const ContextProvider = ({children}) => {\r\n    const [state, dispatch] = useReducer(Reducer, INITIAL_STATE);\r\n\r\n    // whenever state.user changes, execute this function\r\n    //\r\n    useEffect(()=> {    \r\n        // can't pass state.user directly, need to use json\r\n        localStorage.setItem(\"user\", JSON.stringify(state.user));\r\n    },[state.user]);\r\n\r\n    return(\r\n        <Context.Provider value={{\r\n            user:state.user,\r\n            isFetching: state.isFetching,\r\n            error: state.error,\r\n            dispatch\r\n        }}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}","import { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Context } from \"../../context/Context\";\r\nimport \"./topbar.css\"\r\n\r\nexport default function TopBar() {\r\n    // getting user object from our context\r\n    // also getting dispatch function\r\n    const {user, dispatch} = useContext(Context);\r\n\r\n    // getting the location of our public folder, so we can display the user's profile picture\r\n    const PF = \"http://localhost:5000/images/\";\r\n    \r\n    // function for handling user logout, done by setting the user object to null via dispatching\r\n    // to our context\r\n    const handleLogout = () => {\r\n        dispatch({type: \"LOGOUT\"})\r\n    }\r\n    return (\r\n        <div className=\"top\">\r\n            <div className=\"topLeft\">\r\n                <i className=\"topIcon fab fa-facebook-square\"></i>\r\n                <i className=\"topIcon fab fa-twitter-square\"></i>\r\n                <i className=\"topIcon fab fa-pinterest-square\"></i>\r\n                <i className=\"topIcon fab fa-instagram-square\"></i>\r\n            </div>\r\n            <div className=\"topCenter\">\r\n                <ul className=\"topList\">\r\n                    <li className=\"topListItem\">\r\n                        <Link className=\"link\" to=\"/\">HOME</Link>\r\n                    </li>\r\n                    <li className=\"topListItem\">\r\n                        <Link className=\"link\" to=\"/write\">WRITE</Link>\r\n                        </li>\r\n                    <li className=\"topListItem\">\r\n                        <Link className=\"link\" to=\"/\">ABOUT</Link>\r\n                        </li>\r\n                    <li className=\"topListItem\">\r\n                        <Link className=\"link\" to=\"/\">CONTACTS</Link>\r\n                        </li>\r\n                    {/* Since our user object will either be populated or null, we can call it\r\n                        like a boolean; will return true if it exists, false if not; so we display\r\n                        \"LOGOUT\" only if there is a user object aka if the user is logged in\r\n                        also, when the user clicks the button, call our handleLogout function to\r\n                        log the user out of the blog */}\r\n                    <li className=\"topListItem\">\r\n                        <Link className=\"link\" to=\"/\" onClick={handleLogout}>{user && \"LOGOUT\"}</Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"topRight\">\r\n                {/* Big ternary statement displaying either our user's profile image or \"LOGIN\"\r\n                    and \"REGISTER\", which a user shouldn't see */}\r\n                {user ? (\r\n                    <Link to=\"/settings\">\r\n                        {user.profilePic == \"\" ? (\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"topImg\">\r\n                                <text\r\n                                    className=\"svgText\"\r\n                                    dominantBaseline=\"middle\"\r\n                                    x=\"50%\"\r\n                                    y=\"55%\"\r\n                                >\r\n                                    {user.username.charAt(0).toUpperCase()}\r\n                                </text>\r\n                            </svg>\r\n                        ) : (\r\n                            <img className=\"topImg\" src={PF + user.profilePic} alt=\"\" />\r\n                        )}\r\n                    </Link>\r\n                ) : (\r\n                    <ul className=\"topList\">\r\n                        <li className=\"topListItem\">\r\n                            <Link className=\"link\" to=\"/login\">\r\n                                LOGIN\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"topListItem\">\r\n                            <Link className=\"link\" to=\"/register\">\r\n                                REGISTER\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                )}\r\n                <i className=\"topSearchIcon fas fa-search\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport { Link } from \"react-router-dom\"\r\nimport { Context } from \"../../context/Context\";\r\nimport \"./singlePost.css\";\r\nimport axios from \"axios\";\r\n\r\nexport default function SinglePost() {\r\n    // \"location\" is the current url\r\n    const location = useLocation()\r\n    // \"path\" is the page's id, which is scraped from the url\r\n    const path = location.pathname.split(\"/\")[2];\r\n    // another useState function; not sure what exactly it is, but it seems like it gives the data\r\n    // sent by setPost to the variable post\r\n    const [post, setPost] = useState({});\r\n    // our public folder of images; will display this post's image with it\r\n    const PF = \"http://localhost:5000/images/\";\r\n    // get the user data from our context\r\n    const { user, dispatch } = useContext(Context);\r\n\r\n    // need to handle user pressing update button\r\n    const [title, setTitle] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [updateMode, setUpdateMode] = useState(false);\r\n    \r\n    // problem: if you set the username in your local storage to the posts's username, you could\r\n    // edit anyone's posts\r\n    // solution: first, if the id isn't valid at all, then log the user out; then, if we know the\r\n    // userId is valid, we can update the username in the locally stored data via dispatching a\r\n    // login_success action to the one we get back from calling getUser\r\n    useEffect(()=> {\r\n        const refreshUserData = async ()=> {\r\n            // declare variable for user we get back from api\r\n            var userFromId;\r\n            // try/catch block, see if the given id is even valid at all\r\n            try {\r\n                userFromId = await axios.get(\"/users/\"+user._id);\r\n            } catch(err){}\r\n            if(!userFromId) {\r\n                dispatch({type: \"LOGOUT\"});\r\n            } else {\r\n                dispatch({type:\"LOGIN_SUCCESS\", payload: userFromId.data});\r\n            }\r\n        };\r\n        refreshUserData();\r\n    });\r\n\r\n    // again, not sure exactly what useEffect is, but the statement calls the api with the\r\n    // proxy url + /posts/ + path; so, something like http://localhost:5000/api/posts/12345\r\n    useEffect(()=> {\r\n        const getPost = async ()=>{\r\n            // get the post data from our api through posts.js's get function; \r\n            const res = await axios.get(\"/posts/\"+path)\r\n            setPost(res.data);\r\n            setTitle(res.data.title);\r\n            setDesc(res.data.desc);\r\n        };\r\n        getPost();\r\n    },[path]);\r\n\r\n    // delete the post when the user presses the trash icon\r\n    const handleDelete = async () => {\r\n        try {\r\n            // call the delete function in our api under posts.js to remove the current post\r\n            // from the database; passing it the username from the context\r\n            await axios.delete(\"/posts/\" + path, {\r\n                data:{username:user.username}\r\n            });\r\n            // go back to the homepage\r\n            window.location.replace(\"/\");\r\n        } catch(err){}\r\n    }\r\n\r\n    // when the user presses the submit button, give the new data to our api and reload the page\r\n    const handleUpdate = async()=>{\r\n        try {\r\n            // updating post via our api by calling put function in posts.js with our username\r\n            await axios.put(\"/posts/\" + path, {username:user.username, title:title, desc:desc});\r\n            // \r\n            setUpdateMode(false);\r\n        } catch(err){}\r\n    }\r\n\r\n    return (\r\n        <div className=\"singlePost\">\r\n            <div className=\"singlePostWrapper\">\r\n                {/* only display post image if it exists; use the photo url in post in conjunction\r\n                    with our photo folder url defined above to get the right picture */}\r\n                {post.photo && (\r\n                    <img\r\n                        className=\"singlePostImg\" \r\n                        src={PF + post.photo}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n                {   // -kind of ugly block of html inside a big ternary operator; basically, if we\r\n                    //  are the owner of the post and have clicked the update button, we want to\r\n                    //  turn the title and buttons into a single text input box\r\n                    // -old line of code: value={post.title} before we made page updateable; we can\r\n                    //  use just \"title\" instead because we pass the response data for title\r\n                    //  directly into its own variable instead of accessing a field in \"post\"\r\n                    // -also, onChange attribute calls setDesc to update our description variable\r\n                    //  whenever the field changes\r\n                    updateMode ? (\r\n                        <input type=\"text\"\r\n                        value={title}\r\n                        className=\"singlePostTitleInput\"\r\n                        autoFocus\r\n                        onChange={(e)=>setTitle(e.target.value)}/> \r\n                    // :(\r\n                    ) : (\r\n                        <h1 className=\"singlePostTitle\">\r\n                            {title}\r\n                            {/* conditional statement to only display edit and delete buttons if\r\n                                you are the owner of the post*/}\r\n                            {post.username === user?.username && (\r\n                                <div className = \"singlePostEdit\">\r\n                                    <i \r\n                                    //  if the edit button is pressed, we call setUpdateMode with true\r\n                                    //  to turn the page into edit mode\r\n                                        className=\"singlePostIcon far fa-edit\"\r\n                                        onClick = {()=>setUpdateMode(true)}\r\n                                    ></i>\r\n                                    <i \r\n                                    //  if the delete button is pressed, we call handleDelete delete our\r\n                                    //  post via the api and redirect the page back to home\r\n                                        className=\"singlePostIcon far fa-trash-alt\"\r\n                                        onClick = {handleDelete}\r\n                                    ></i>\r\n                                </div>\r\n                            )}\r\n                        </h1>\r\n                    )\r\n                }\r\n                <div className=\"singlePostInfo\">\r\n                    <span className=\"singlePostAuthor\">\r\n                    {/* Link react component; what this really is calling is to go to Home.jsx but\r\n                        add on a ?user= to the url to filter for a certain user's posts */}\r\n                    Author: \r\n                    <Link to={`/?user=${post.username}`} className=\"link\">\r\n                        <b>{post.username}</b>\r\n                    </Link>\r\n                    </span>\r\n                    <span className=\"singlePostDate\">{new Date(post.createdAt).toDateString()}</span>\r\n                </div>\r\n                {updateMode ? (\r\n                    // old line of code: value={post.desc} before we made page updateable\r\n                    // onChange function: pass context of text input into desc variable via setDesc\r\n                    <>\r\n                        <textarea\r\n                            className = \"singlePostDescInput\"\r\n                            value={desc}\r\n                            onChange={(e)=>setDesc(e.target.value)}\r\n                        />\r\n                        {/* call handleUpdate function to update post via api and set updateMode\r\n                            to false; don't need to reload the page since we constantly update\r\n                            our variables */}\r\n                        <button className=\"singlePostButton\" onClick={handleUpdate}>\r\n                            Submit\r\n                        </button>\r\n                    </>\r\n                ) : (\r\n                    <p className = \"singlePostDesc\">{desc}</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import Sidebar from \"../../components/sidebar/Sidebar\"\r\nimport SinglePost from \"../../components/singlePost/SinglePost\"\r\nimport \"./single.css\"\r\n\r\nexport default function Single() {\r\n    return (\r\n        <div className=\"single\">\r\n            <SinglePost/>\r\n            <Sidebar/>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext } from \"react\"\r\nimport { Context } from \"../../context/Context\";\r\nimport axios from \"axios\";\r\nimport \"./write.css\"\r\n\r\n\r\nexport default function Write() {\r\n    // functions for passing what we get back from setTitle, setDesc, setFile into respective vars\r\n    const [title, setTitle] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [file, setFile] = useState(null);\r\n    // we also need our user data from our Context\r\n    const {user} = useContext(Context);\r\n\r\n    const handleSubmit = async (e)=>{\r\n        // do nothing if nothing is entered\r\n        e.preventDefault();\r\n        // create a post object with our username, title, and description\r\n        const newPost = {\r\n            username:user.username,\r\n            title,\r\n            desc,\r\n        };\r\n        // if the post was submitted with a file, handle that\r\n        if(file) {\r\n            // create new form ordered by key/value for sending the image\r\n            const data = new FormData();\r\n            // create filename string by combining current date printout and the name of the\r\n            // uploaded file\r\n            const filename = Date.now() + file.name;\r\n            // add the filename under the \"name\" key to our data\r\n            data.append(\"name\", filename)\r\n            // add the file under the \"file\" key to our data\r\n            data.append(\"file\", file)\r\n            // set the \"photo\" field of our post to our filename\r\n            newPost.photo = filename;\r\n            // try to upload our file\r\n            try {\r\n                await axios.post(\"/upload\", data);\r\n            } catch (err){}\r\n        }\r\n        try {\r\n            // create response object, call our api's /posts route, and fill object with returned data\r\n            const res = await axios.post(\"/posts\", newPost);\r\n            // change the URL to post page, passing in the id we just got from the api call\r\n            window.location.replace(\"/post/\" + res.data._id);\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"write\">\r\n            {/* since the onChange function in the fileInput input will asynchronously call\r\n                setFile and change the file object, we can use the file object as a boolean to\r\n                display a banner with our file object's data\r\n                we then call the createObjectURL function from javascript's URL interface\r\n                in order to display our image */}\r\n            {file && (\r\n            <img\r\n                className=\"writeImg\"\r\n                src={URL.createObjectURL(file)}\r\n                alt=\"\"\r\n            />\r\n            )}\r\n            <form className=\"writeForm\" onSubmit = {handleSubmit}>\r\n                <div className=\"writeFormGroup\">\r\n                    <label htmlFor=\"fileInput\">\r\n                        <i className=\"writeIcon fas fa-plus\"></i>\r\n                    </label>\r\n                    <input\r\n                        // passing an arrow function to the onChange html attribute, so that\r\n                        // whenever the field changes, onChange will call our e function, which\r\n                        // calls setFile with the data in the field\r\n                        type=\"file\" \r\n                        id=\"fileInput\"\r\n                        style={{display:\"none\"}}\r\n                        onChange = {e=>setFile(e.target.files[0])}\r\n                    />\r\n                    <input\r\n                        // same as above, but passing the title\r\n                        type=\"text\"\r\n                        placeholder=\"Title\"\r\n                        className=\"writeInput\"\r\n                        autoFocus={true}\r\n                        onChange = {e=>setTitle(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"writeFormGroup\">\r\n                    <textarea\r\n                        // same as above, but passing the description\r\n                        placeholder=\"Tell your story...\"\r\n                        type=\"text\"\r\n                        className=\"writeInput writeText\"\r\n                        onChange = {e=>setDesc(e.target.value)}\r\n                    ></textarea>\r\n                </div>\r\n                <button className=\"writeSubmit\" type=\"submit\">\r\n                    Publish\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useContext } from \"react\";\r\nimport { Context } from \"../../context/Context\";\r\nimport Sidebar from \"../../components/sidebar/Sidebar\"\r\nimport axios from \"axios\"\r\nimport \"./settings.css\"\r\n\r\nexport default function Settings() {\r\n    // putting information into file object if setFile is called\r\n    const [file, setFile] = useState(null);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    // getting our user information and dispatch function from our context\r\n    const {user, dispatch} = useContext(Context);\r\n\r\n    // getting the location of our public folder, so we can display the user's profile picture\r\n    const PF = \"http://localhost:5000/images/\";\r\n\r\n    const handleSubmit = async (e)=>{\r\n        // do nothing if nothing is entered\r\n        e.preventDefault();\r\n        // tell our context that the user has started updating their profile\r\n        dispatch({type:\"UPDATE_START\"});\r\n        // create a new user object with our updated user information\r\n        const updatedUser = {\r\n            userId: user._id,\r\n            username,\r\n            email,\r\n            password\r\n        };\r\n        // if the post was submitted with a file, handle that\r\n        if(file) {\r\n            // create new form ordered by key/value for sending the profile pic\r\n            const data = new FormData();\r\n            // create filename string by combining current date printout and the name of the\r\n            // uploaded file\r\n            const filename = Date.now() + file.name;\r\n            // add the filename under the \"name\" key to our data\r\n            data.append(\"name\", filename)\r\n            // add the file under the \"file\" key to our data\r\n            data.append(\"file\", file)\r\n            // set the \"profilePic\" field of our new user object to our filename\r\n            updatedUser.profilePic = filename;\r\n            // try to upload our file, through multer's /upload path in our api\r\n            try {\r\n                await axios.post(\"/upload\", data);\r\n            } catch (err){}\r\n        }\r\n        try {\r\n            // not going to create response object like in Write.jsx; simply just going to put\r\n            // our new user information to the api\r\n            const res = await axios.put(\"users/\" + user._id, updatedUser);\r\n            // since the axios.post would have tripped the try/catch statement upon not\r\n            // working, we call setSuccess with true to set our success boolean true and\r\n            // display the success text at the bottom\r\n            setSuccess(true);\r\n            // dispatch to our context that the update was successful; pass user data to context\r\n            // so we can update it\r\n            dispatch({type:\"UPDATE_SUCCESS\", payload: res.data});\r\n        } catch(err){\r\n            console.log(err);\r\n            // dispatch to our context that the update failed\r\n            dispatch({type:\"UPDATE_FAILURE\"});\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"settings\">\r\n            <div className=\"settingsWrapper\">\r\n                <div className=\"settingsTitle\">\r\n                    <span className=\"settingsUpdateTitle\">Update your Account</span>\r\n                    <span className=\"settingsDeleteTitle\">Delete your Account</span>\r\n                </div>\r\n                {/* onSubmit calls handleSubmit function, which will update the user data */}\r\n                <form className=\"settingsForm\" onSubmit={handleSubmit}>\r\n                    <label>Profile picture</label>\r\n                    <div className=\"settingsPP\">\r\n                        {file ? (\r\n                            <img src={URL.createObjectURL(file)} alt=\"\"/>\r\n                        ) : (\r\n                            user.profilePic == \"\" ? (\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <text className=\"placeholderPfp\"\r\n                                        dominantBaseline=\"middle\"\r\n                                        x=\"50%\"\r\n                                        y=\"55%\">\r\n                                        {user.username.charAt(0).toUpperCase()}\r\n                                    </text>\r\n                                </svg>\r\n                            ) : (\r\n                                <img src={PF + user.profilePic} alt=\"\"/>\r\n                            )\r\n                        )}\r\n                        {/* if we've uploaded a file, then use the URL javascript interface to\r\n                            create an object url for the file, and display it; if not, just\r\n                            display current profile pic */}\r\n                        \r\n                        <label htmlFor=\"fileInput\">\r\n                            <i className=\"settingsPPIcon far fa-user-circle\"></i>\r\n                        </label>\r\n                        <input \r\n                        //  when the user changes the page, the html attribute onChange will call\r\n                        //  the e function, which calls setFile with the data in the field, \r\n                        //  updating the \"file\" variable with our new photo\r\n                            type=\"file\" \r\n                            id=\"fileInput\" \r\n                            style={{display:\"none\"}}\r\n                            onChange = {e=>setFile(e.target.files[0])}\r\n                        />\r\n                    </div>\r\n                    <label>Username</label>\r\n                    {/* fetching username from our user context, putting it in the update form's\r\n                        placeholder text\r\n                        onChange function is like above, but for our username*/}\r\n                    <input type=\"text\" \r\n                        placeholder={user.username} \r\n                        onChange = {e=>setUsername(e.target.value)}\r\n                    />\r\n                    <label>Email</label>\r\n                    {/* same as above, but with our email */}\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder={user.email}\r\n                        onChange = {e=>setEmail(e.target.value)}\r\n                    />\r\n                    <label>Password</label>\r\n                    {/* same as above, but with our password*/}\r\n                    <input\r\n                        type=\"password\"\r\n                        onChange = {e=>setPassword(e.target.value)}\r\n                    />\r\n                    <button className=\"settingsSubmit\" type=\"submit\">Update</button>\r\n                    \r\n                    {success && <span className=\"settingsUpdateText\">Profile has been updated</span>}\r\n                </form>\r\n            </div>\r\n            <Sidebar/>\r\n        </div>\r\n    )\r\n}\r\n","import { useRef, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\nimport { Context } from \"../../context/Context\";\r\nimport axios from \"axios\"\r\nimport \"./login.css\"\r\n\r\nexport default function Login() {\r\n    const userRef = useRef();\r\n    const passwordRef = useRef();\r\n    // getting dispatch and isFetching from our context\r\n    const { dispatch, isFetching } = useContext(Context);\r\n\r\n    // function that handles submitting user information, and logs the user in\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        // when login button is clicked, will call LOGIN_START in Reducer.js, isFetching will\r\n        // be true\r\n        dispatch({type:\"LOGIN_START\"});\r\n        try {\r\n            // sending login data to api, seeing if it returns an error\r\n            const res = await axios.post(\"/auth/login\", {\r\n                username: userRef.current.value,\r\n                password: passwordRef.current.value\r\n            })\r\n            // calls LOGIN_SUCCESS in Reducer.js, we're sending the data gotten from our database\r\n            // as the payload\r\n            dispatch({type:\"LOGIN_SUCCESS\", payload: res.data});\r\n        } catch(err) {\r\n            dispatch({type:\"LOGIN_FAILURE\"});\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"login\">\r\n            <span className=\"loginTitle\">Login</span>\r\n            <form className=\"loginForm\" onSubmit={handleSubmit}>\r\n                <label>Username</label>\r\n                <input\r\n                    className=\"loginInput\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your username...\"\r\n                    ref={userRef}\r\n                />\r\n                <label>Password</label>\r\n                <input\r\n                    className=\"loginInput\"\r\n                    type=\"password\"\r\n                    placeholder=\"Enter your password...\"\r\n                    ref={passwordRef}\r\n                />\r\n                {/* using the \"disabled\" html attribute to make login button unclickable\r\n                    when currently fetching data */}\r\n                <button className=\"loginButton\" type=\"submit\" disabled={isFetching}>\r\n                    Login\r\n                </button>\r\n            </form>\r\n            <button className=\"loginRegisterButton\">\r\n                <Link className=\"link\" to=\"/register\">Register</Link>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\nimport \"./register.css\"\r\nimport axios from \"axios\"\r\n\r\nexport default function Register() {\r\n    // more useState functions, hooking up our data\r\n    const [username,setUsername] = useState(\"\");\r\n    const [email,setEmail] = useState(\"\");\r\n    const [password,setPassword] = useState(\"\");\r\n    // user experience detail that will tell user if something goes wrong; \"error\" variable is\r\n    // later use to toggle a span on/off below if there was an error during registration\r\n    const [error,setError] = useState(false);\r\n\r\n    const handleSubmit = async (e)=>{\r\n        // When submit button is pressed, don't do anything\r\n        e.preventDefault();\r\n        // even though error is false by default, we want to set it false in the period after the\r\n        // user presses the button and we're still waiting on our database, just for quality of\r\n        // experience\r\n        setError(false);\r\n        try {\r\n            // we call our auth.js register function with the given username, email and password\r\n            const res = await axios.post(\"/auth/register\", {\r\n                username,\r\n                email,\r\n                password\r\n            });\r\n            res.data && window.location.replace(\"/login\");\r\n        } catch(err) {\r\n            setError(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"register\">\r\n            <span className=\"registerTitle\">Register</span>\r\n            {/* html's onSubmit listens for when we hit the submit button, and calls handleSubmit\r\n                when that happens*/}\r\n            <form className=\"registerForm\" onSubmit={handleSubmit}>\r\n                <label>Username</label>\r\n                {/* with the onChange line below as well as the others, we're making use of html's\r\n                    onChange function by giving it a function e as a variable, which will then\r\n                    call our setUsername function above with the data in the field, which is\r\n                    (e.target.value) */}\r\n                <input\r\n                    className=\"registerInput\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your username...\" \r\n                    onChange = {e=>setUsername(e.target.value)}\r\n                />\r\n                <label>Email</label>\r\n                <input\r\n                    className=\"registerInput\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your email...\"\r\n                    onChange = {e=>setEmail(e.target.value)}\r\n                />\r\n                <label>Password</label>\r\n                <input\r\n                    className=\"registerInput\"\r\n                    type=\"password\"\r\n                    placeholder=\"Enter your password...\"\r\n                    onChange = {e=>setPassword(e.target.value)}\r\n                />\r\n                <button className=\"registerButton\" type=\"submit\">Register</button>\r\n            </form>\r\n            <button className=\"registerLoginButton\">\r\n                <Link className=\"link\" to=\"/login\">Login</Link>\r\n            </button>\r\n            {error && <span style={{color:\"red\", marginTop:\"10px\"}}>\"Something went wrong...\"</span>}\r\n        </div>\r\n    )\r\n}\r\n","import Home from \"./pages/home/Home\";\nimport TopBar from \"./components/topbar/TopBar\";\nimport Single from \"./pages/single/Single\";\nimport Write from \"./pages/write/Write\";\nimport Settings from \"./pages/settings/Settings\";\nimport Login from \"./pages/login/Login\";\nimport Register from \"./pages/register/Register\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { Context } from \"./context/Context\";\n\nfunction App() {\n  // going to fetch user from context instead of making psuedo-user\n  const {user} = useContext(Context);\n  return (\n    <Router>\n      <TopBar/>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home/>\n        </Route>\n        <Route path=\"/register\">\n          {user ? <Home/> : <Register/>}\n        </Route>\n        <Route path=\"/login\">\n          {user ? <Home/> : <Login/>}\n        </Route>\n        <Route path=\"/settings\">\n          {user ? <Settings/> : <Register/>}\n        </Route>\n        <Route path=\"/write\">\n          {user ? <Write/> : <Register/>}\n        </Route>\n        <Route path=\"/post/:postId\">\n          <Single/>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {ContextProvider} from \"./context/Context\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContextProvider>\n      <App />\n    </ContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}